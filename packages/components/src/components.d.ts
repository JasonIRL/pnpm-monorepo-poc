/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MonoButton {
        /**
          * The text to display on the button.
         */
        "text": string;
        /**
          * The type of button.
          * @default 'Primary'
          * @values 'Primary', 'Secondary'
         */
        "type": 'Primary' | 'Secondary';
    }
}
export interface MonoButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMonoButtonElement;
}
declare global {
    interface HTMLMonoButtonElementEventMap {
        "monoClick": any;
    }
    interface HTMLMonoButtonElement extends Components.MonoButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMonoButtonElementEventMap>(type: K, listener: (this: HTMLMonoButtonElement, ev: MonoButtonCustomEvent<HTMLMonoButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMonoButtonElementEventMap>(type: K, listener: (this: HTMLMonoButtonElement, ev: MonoButtonCustomEvent<HTMLMonoButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMonoButtonElement: {
        prototype: HTMLMonoButtonElement;
        new (): HTMLMonoButtonElement;
    };
    interface HTMLElementTagNameMap {
        "mono-button": HTMLMonoButtonElement;
    }
}
declare namespace LocalJSX {
    interface MonoButton {
        "onMonoClick"?: (event: MonoButtonCustomEvent<any>) => void;
        /**
          * The text to display on the button.
         */
        "text"?: string;
        /**
          * The type of button.
          * @default 'Primary'
          * @values 'Primary', 'Secondary'
         */
        "type"?: 'Primary' | 'Secondary';
    }
    interface IntrinsicElements {
        "mono-button": MonoButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mono-button": LocalJSX.MonoButton & JSXBase.HTMLAttributes<HTMLMonoButtonElement>;
        }
    }
}
